From f184a7511d1099690075384ec096afed8a9936cc Mon Sep 17 00:00:00 2001
From: The-BB <tun.chen.bo@gmail.com>
Date: Mon, 5 Jun 2023 14:39:51 +0300
Subject: [PATCH] lang/python/numpy: bump to 1.24.3

---
 lang/python/numpy/Makefile                    | 27 ++++++++---
 .../numpy/patches/001-fix-001-unpin.patch     | 10 ++++
 .../numpy/patches/500-fix-001-unpin.patch     | 10 ++++
 lang/python/numpy/patches/501-fix.patch       | 48 +++++++++++++++++++
 4 files changed, 88 insertions(+), 7 deletions(-)
 create mode 100644 lang/python/numpy/patches/001-fix-001-unpin.patch
 create mode 100644 lang/python/numpy/patches/500-fix-001-unpin.patch
 create mode 100644 lang/python/numpy/patches/501-fix.patch

diff --git a/lang/python/numpy/Makefile b/lang/python/numpy/Makefile
index d7e485d79..b8cae411f 100644
--- a/lang/python/numpy/Makefile
+++ b/lang/python/numpy/Makefile
@@ -2,15 +2,16 @@
 # Copyright (C) 2019 Jakub Piotr CÅ‚apa <jpc@loee.pl>
 # Copyright (C) 2020 Alexandru Ardelean <ardeleanalex@gmail.com>
 #
+# XXX bump (hass)
 
 include $(TOPDIR)/rules.mk
 
 PKG_NAME:=numpy
-PKG_VERSION:=1.23.3
-PKG_RELEASE:=5
+PKG_VERSION:=1.24.3
+PKG_RELEASE:=1
 
 PYPI_NAME:=$(PKG_NAME)
-PKG_HASH:=51bf49c0cd1d52be0a240aa66f3458afc4b95d8993d2d04f0d91fa60c10af6cd
+PKG_HASH:=ab344f1bf21f140adab8e47fdbc7c35a477dc01408791f8ba00d018dd0bc5155
 
 PKG_MAINTAINER:=Alexandru Ardelean <ardeleanalex@gmail.com>
 
@@ -27,6 +28,9 @@ PKG_BUILD_DEPENDS:=python-cython/host
 PYTHON3_PKG_BUILD_VARS:= \
         $(if $(CONFIG_NUMPY_OPENBLAS_SUPPORT),,NPY_BLAS_ORDER= NPY_LAPACK_ORDER= )
 
+# XXX currently supports only x86_64 AVX-512
+PYTHON3_PKG_BUILD_VARS += NPY_DISABLE_SVML=1
+
 include ../pypi.mk
 include $(INCLUDE_DIR)/package.mk
 include ../python3-package.mk
@@ -37,8 +41,9 @@ define Package/python3-numpy
   CATEGORY:=Languages
   TITLE:=The fundamental package for scientific computing with Python
   URL:=https://www.numpy.org/
-  DEPENDS:=@!SOFT_FLOAT +INSTALL_GFORTRAN:libgfortran +python3 \
-	   +NUMPY_OPENBLAS_SUPPORT:openblas
+#  DEPENDS:=@!SOFT_FLOAT +INSTALL_GFORTRAN:libgfortran +python3 \
+#	   +NUMPY_OPENBLAS_SUPPORT:openblas
+  DEPENDS:=+python3
 endef
 
 # We need to duplicate the omitted arhitectures same as openblas
@@ -56,8 +61,8 @@ endef
 
 define Build/Prepare/numpy-sitecfg
 	echo "[DEFAULT]"                                 >  $(PKG_BUILD_DIR)/site.cfg
-	echo "library_dirs = $(STAGING_DIR)/usr/lib"     >> $(PKG_BUILD_DIR)/site.cfg
-	echo "include_dirs = $(STAGING_DIR)/usr/include" >> $(PKG_BUILD_DIR)/site.cfg
+	echo "library_dirs = $(STAGING_DIR)/opt/lib"     >> $(PKG_BUILD_DIR)/site.cfg
+	echo "include_dirs = $(STAGING_DIR)/opt/include" >> $(PKG_BUILD_DIR)/site.cfg
 
   ifdef CONFIG_NUMPY_OPENBLAS_SUPPORT
 	echo                                             >> $(PKG_BUILD_DIR)/site.cfg
@@ -80,6 +85,14 @@ For some modules to be available, the INSTALL_GFORTRAN symbol needs
 to be enabled in the OpenWrt core/toolchain.
 endef
 
+define Build/InstallDev
+	$(INSTALL_DIR) $(1)/opt/include/numpy
+	$(CP) $(PKG_BUILD_DIR)/numpy/core/include/numpy/* $(1)/opt/include/numpy
+	$(CP) \
+		$(PKG_BUILD_DIR)/build/src.linux-$(ARCH)-$(PYTHON3_VERSION)/numpy/core/include/numpy/*.h \
+			$(1)/opt/include/numpy
+endef
+
 $(eval $(call Py3Package,python3-numpy))
 $(eval $(call BuildPackage,python3-numpy))
 $(eval $(call BuildPackage,python3-numpy-src))
diff --git a/lang/python/numpy/patches/001-fix-001-unpin.patch b/lang/python/numpy/patches/001-fix-001-unpin.patch
new file mode 100644
index 000000000..693f95a2d
--- /dev/null
+++ b/lang/python/numpy/patches/001-fix-001-unpin.patch
@@ -0,0 +1,10 @@
+--- a/pyproject.toml
++++ b/pyproject.toml
+@@ -1,6 +1,7 @@
+ [build-system]
+ # Minimum requirements for the build system to execute.
+ requires = [
++    "packaging==20.5; platform_machine=='arm64'",  # macos M1
+     "setuptools==59.2.0",
+     "wheel==0.37.0",
+     "Cython>=0.29.30,<3.0",
diff --git a/lang/python/numpy/patches/500-fix-001-unpin.patch b/lang/python/numpy/patches/500-fix-001-unpin.patch
new file mode 100644
index 000000000..fe3c507a2
--- /dev/null
+++ b/lang/python/numpy/patches/500-fix-001-unpin.patch
@@ -0,0 +1,10 @@
+--- a/pyproject.toml
++++ b/pyproject.toml
+@@ -1,7 +1,6 @@
+ [build-system]
+ # Minimum requirements for the build system to execute.
+ requires = [
+-    "packaging==20.5; platform_machine=='arm64'",  # macos M1
+     "setuptools>=59.2.0",
+     "wheel>=0.37.0",
+     "Cython>=0.29.30,<3.0",
diff --git a/lang/python/numpy/patches/501-fix.patch b/lang/python/numpy/patches/501-fix.patch
new file mode 100644
index 000000000..46dbf5d43
--- /dev/null
+++ b/lang/python/numpy/patches/501-fix.patch
@@ -0,0 +1,48 @@
+--- a/numpy/distutils/ccompiler_opt.py
++++ b/numpy/distutils/ccompiler_opt.py
+@@ -201,7 +201,7 @@ class _Config:
+         gcc = dict(
+             # native should always fail on arm and ppc64,
+             # native usually works only with x86
+-            native = '-march=native',
++            native = None,
+             opt = '-O3',
+             werror = '-Werror',
+         ),
+@@ -238,6 +238,8 @@ class _Config:
+         ppc64le = "VSX VSX2",
+         s390x = '',
+         armhf = '', # play it safe
++        mips = '', # mips
++        mipsel = '', # mipsel
+         aarch64 = "NEON NEON_FP16 NEON_VFPV4 ASIMD"
+     )
+     conf_features = dict(
+@@ -965,6 +967,9 @@ class _CCompiler:
+             ("cc_on_armhf",    ".*arm.*", "defined(__ARM_ARCH_7__) || "
+                                           "defined(__ARM_ARCH_7A__)"),
+             ("cc_on_s390x",    ".*s390x.*", ""),
++            # mips(el) platform
++            ("cc_on_mips",	".*mips.*", ""),
++            ("cc_on_mipsel",	".*mips(el|le).*", ""),
+             # undefined platform
+             ("cc_on_noarch",   "", ""),
+         )
+@@ -980,7 +985,7 @@ class _CCompiler:
+         )
+         detect_args = (
+            ("cc_has_debug",  ".*(O0|Od|ggdb|coverage|debug:full).*", ""),
+-           ("cc_has_native", ".*(-march=native|-xHost|/QxHost).*", ""),
++           ("cc_has_native", ".*(-xHost|/QxHost).*", ""),
+            # in case if the class run with -DNPY_DISABLE_OPTIMIZATION
+            ("cc_noopt", ".*DISABLE_OPT.*", ""),
+         )
+@@ -1035,7 +1040,7 @@ class _CCompiler:
+ 
+         self.cc_march = "unknown"
+         for arch in ("x86", "x64", "ppc64", "ppc64le",
+-                     "armhf", "aarch64", "s390x"):
++                     "armhf", "aarch64", "s390x", "mips", "mipsel"):
+             if getattr(self, "cc_on_" + arch):
+                 self.cc_march = arch
+                 break
-- 
2.30.2

