--- a/setup.py
+++ b/setup.py
@@ -168,7 +168,7 @@ BUILD_WITH_SYSTEM_RE2 = _env_bool_value(
 # Export this variable to use the system installation of abseil. You need to
 # have the header files installed (in /usr/include/absl) and during
 # runtime, the shared library must be installed
-BUILD_WITH_SYSTEM_ABSL = os.environ.get("GRPC_PYTHON_BUILD_SYSTEM_ABSL", False)
+BUILD_WITH_SYSTEM_ABSL = os.environ.get("GRPC_PYTHON_BUILD_SYSTEM_ABSL", "False")
 
 # Export this variable to force building the python extension with a statically linked libstdc++.
 # At least on linux, this is normally not needed as we can build manylinux-compatible wheels on linux just fine
@@ -314,25 +314,25 @@ if BUILD_WITH_SYSTEM_OPENSSL:
         lambda x: "third_party/boringssl" not in x, CORE_C_FILES
     )
     CORE_C_FILES = filter(lambda x: "src/boringssl" not in x, CORE_C_FILES)
-    SSL_INCLUDE = (os.path.join("/usr", "include", "openssl"),)
+    SSL_INCLUDE = (os.path.join("@STAGING_DIR@", "include", "openssl"),)
 
 if BUILD_WITH_SYSTEM_ZLIB:
     CORE_C_FILES = filter(lambda x: "third_party/zlib" not in x, CORE_C_FILES)
-    ZLIB_INCLUDE = (os.path.join("/usr", "include"),)
+    ZLIB_INCLUDE = (os.path.join("@STAGING_DIR@", "include"),)
 
 if BUILD_WITH_SYSTEM_CARES:
     CORE_C_FILES = filter(lambda x: "third_party/cares" not in x, CORE_C_FILES)
-    CARES_INCLUDE = (os.path.join("/usr", "include"),)
+    CARES_INCLUDE = (os.path.join("@STAGING_DIR@", "include"),)
 
 if BUILD_WITH_SYSTEM_RE2:
     CORE_C_FILES = filter(lambda x: "third_party/re2" not in x, CORE_C_FILES)
-    RE2_INCLUDE = (os.path.join("/usr", "include", "re2"),)
+    RE2_INCLUDE = (os.path.join("@STAGING_DIR@", "include", "re2"),)
 
 if BUILD_WITH_SYSTEM_ABSL:
     CORE_C_FILES = filter(
         lambda x: "third_party/abseil-cpp" not in x, CORE_C_FILES
     )
-    ABSL_INCLUDE = (os.path.join("/usr", "include"),)
+    ABSL_INCLUDE = (os.path.join("@STAGING_DIR@", "include"),)
 
 EXTENSION_INCLUDE_DIRECTORIES = (
     (PYTHON_STEM,)
@@ -375,7 +375,7 @@ if BUILD_WITH_SYSTEM_RE2:
     EXTENSION_LIBRARIES += ("re2",)
 if BUILD_WITH_SYSTEM_ABSL:
     EXTENSION_LIBRARIES += tuple(
-        lib.stem[3:] for lib in pathlib.Path("/usr").glob("lib*/libabsl_*.so")
+        lib.stem[3:] for lib in pathlib.Path("@STAGING_DIR@").glob("lib*/libabsl_*.so")
     )
 
 DEFINE_MACROS = (("_WIN32_WINNT", 0x600),)
